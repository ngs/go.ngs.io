name: Update Packages

on:
  workflow_dispatch:
    inputs:
      packages:
        description: 'Specific packages to update (space-separated, leave empty for all)'
        required: false
        type: string
      dry-run:
        description: 'Dry run (preview changes without updating)'
        required: false
        type: boolean
        default: false
  schedule:
    # Run every 10 minutes
    - cron: '*/10 * * * *'

jobs:
  update-packages:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
      
      - name: Install dependencies
        run: go mod download
      
      - name: Build update-packages tool
        run: go build -o update-packages ./cmd/update-packages
      
      - name: Update packages
        id: update
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ARGS=""
          
          # Add specific packages if provided
          if [ -n "${{ github.event.inputs.packages }}" ]; then
            ARGS="${{ github.event.inputs.packages }}"
          fi
          
          # Add dry-run flag if enabled
          if [ "${{ github.event.inputs.dry-run }}" = "true" ]; then
            ARGS="$ARGS --dry-run"
            echo "Running in dry-run mode..."
          fi
          
          echo "Running: ./update-packages $ARGS"
          
          # Capture output for PR description
          OUTPUT=$(./update-packages $ARGS 2>&1)
          echo "$OUTPUT"
          
          # Save output for PR body
          echo "$OUTPUT" > update-output.txt
          
          # Check if command succeeded
          if [ $? -ne 0 ]; then
            echo "update-failed=true" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Check for changes
        id: changes
        if: github.event.inputs.dry-run != 'true'
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            
            # Get list of modified files
            MODIFIED_FILES=$(git diff --name-only | grep "^content/" | sed 's/content\///; s/\.md$//' | tr '\n' ' ')
            echo "modified-packages=$MODIFIED_FILES" >> $GITHUB_OUTPUT
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No packages needed updating."
          fi
      
      - name: Configure Git
        if: steps.changes.outputs.has-changes == 'true' && github.event.inputs.dry-run != 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Push changes to update-packages branch
        if: steps.changes.outputs.has-changes == 'true' && github.event.inputs.dry-run != 'true'
        id: push
        run: |
          # Create commit
          git add -A
          git commit -m "Update package metadata from GitHub"
          
          # Push to fixed branch name with force
          git push origin HEAD:update-packages --force
          
          echo "branch-pushed=true" >> $GITHUB_OUTPUT
      
      - name: Check for existing PR
        if: steps.push.outputs.branch-pushed == 'true'
        id: check-pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if PR already exists
          PR_NUMBER=$(gh pr list --head update-packages --json number --jq '.[0].number' || echo "")
          
          if [ -n "$PR_NUMBER" ]; then
            echo "pr-exists=true" >> $GITHUB_OUTPUT
            echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "pr-exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create or Update Pull Request
        if: steps.push.outputs.branch-pushed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_BODY="This PR updates package metadata from GitHub API.
          
          ## Updated Packages
          ${{ steps.changes.outputs.modified-packages }}
          
          ## Trigger
          - Workflow: ${{ github.event_name }}
          - Run: [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          ${{ github.event.inputs.packages && format('- Packages: {0}', github.event.inputs.packages) || '- Packages: All' }}
          
          Please review the changes and merge if everything looks correct."
          
          if [ "${{ steps.check-pr.outputs.pr-exists }}" = "true" ]; then
            # Update existing PR
            gh pr edit ${{ steps.check-pr.outputs.pr-number }} \
              --title "Update package metadata from GitHub" \
              --body "$PR_BODY"
            echo "Updated existing PR #${{ steps.check-pr.outputs.pr-number }}"
          else
            # Create new PR
            gh pr create \
              --title "Update package metadata from GitHub" \
              --body "$PR_BODY" \
              --head update-packages \
              --base master
            echo "Created new PR"
          fi
      
      - name: Output dry-run results
        if: github.event.inputs.dry-run == 'true'
        run: |
          echo "## Dry Run Results"
          echo "The following changes would be made:"
          cat update-output.txt
      
      - name: Create issue on failure
        if: failure() && steps.update.outputs.update-failed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const output = require('fs').readFileSync('update-output.txt', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Package update failed',
              body: `The automatic package update workflow failed.
              
              ## Error Output
              \`\`\`
              ${output}
              \`\`\`
              
              ## Action Required
              Please check that all repository URLs are valid and accessible.
              
              Workflow run: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              labels: ['bug', 'automated']
            });